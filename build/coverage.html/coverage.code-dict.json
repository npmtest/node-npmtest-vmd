{"/home/travis/build/npmtest/node-npmtest-vmd/test.js":"/* istanbul instrument in package npmtest_vmd */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-vmd/lib.npmtest_vmd.js":"/* istanbul instrument in package npmtest_vmd */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_vmd = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_vmd = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-vmd/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-vmd && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_vmd */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_vmd\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_vmd.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_vmd.rollup.js'] =\n            local.assetsDict['/assets.npmtest_vmd.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_vmd.__dirname + '/lib.npmtest_vmd.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-vmd/node_modules/vmd/main/main.js":"const fs = require('fs')\nconst path = require('path')\nconst url = require('url')\nconst app = require('electron').app\nconst dialog = require('electron').dialog\nconst Menu = require('electron').Menu\nconst getStdin = require('get-stdin')\nconst pkg = require('../package.json')\nconst createWindow = require('./create-window')\nconst conf = global.conf = require('./config')\nconst styles = require('./styles')\nconst sharedState = require('../shared/shared-state')\nconst createMenu = require('../shared/create-menu')\n\nconst markdownExtensions = [ 'markdown', 'mdown', 'mkdn', 'md', 'mkd', 'mdwn', 'mdtxt', 'mdtext' ]\nconst defaultFilePath = path.join(__dirname, '..', 'renderer', 'default.md')\n\nif (conf.help) {\n  console.log(fs.readFileSync(path.join(__dirname, '..', 'usage.txt'), 'utf-8'))\n  app.exit(0)\n}\n\nif (conf.version) {\n  console.log(pkg.version)\n  app.exit(0)\n}\n\nif (conf.versions) {\n  console.log('vmd:      ', pkg.version)\n  console.log('electron: ', process.versions['electron'])\n  console.log('node:     ', process.versions['node'])\n  console.log('chrome:   ', process.versions['chrome'])\n  console.log('v8:       ', process.versions['v8'])\n  console.log('openssl:  ', process.versions['openssl'])\n  console.log('zlib:     ', process.versions['zlib'])\n  app.exit(0)\n}\n\nif (conf.get('list.highlight.themes')) {\n  console.log('Available highlight.js themes:')\n  styles.getHighlightThemes()\n    .forEach(function (name) {\n      console.log(' - ' + name)\n    })\n  app.exit(0)\n}\n\nvar filePath = conf._[0] || (process.stdin.isTTY ? conf.document : null)\nconst fromFile = !!filePath\n\nif (fromFile) {\n  try {\n    var stat = fs.statSync(path.resolve(filePath))\n\n    if (stat.isDirectory()) {\n      filePath = path.resolve(filePath, conf.document)\n      stat = fs.statSync(filePath)\n    }\n\n    if (stat.isDirectory()) {\n      console.error('Cannot open', filePath + ': is a directory')\n      app.exit(1)\n    }\n  } catch (ex) {\n    if (ex.code === 'ENOENT') {\n      // use default window since no file was provided\n      filePath = defaultFilePath\n    } else {\n      console.error('Cannot open', filePath + ':', ex.message)\n      app.exit(1)\n    }\n  }\n}\n\n// Quit when all windows are closed.\napp.on('window-all-closed', function () {\n  app.quit()\n})\n\napp.on('ready', function () {\n  registerEmojiProtocol()\n  addApplicationMenu()\n\n  if (!fromFile) {\n    getStdin()\n      .then(function (body) {\n        if (!body) {\n          return createWindow(createWindowOptions(true, defaultFilePath))\n        }\n\n        createWindow(createWindowOptions(false, body.toString()))\n      })\n  } else {\n    createWindow(createWindowOptions(true, filePath))\n  }\n})\n\nfunction createWindowOptions (fromFile, fileOrContent) {\n  var windowOptions = {\n    devTools: conf.devtools,\n    title: conf.title,\n    window: conf.window,\n    mainStylesheet: conf.get('styles.main'),\n    extraStylesheet: conf.get('styles.extra'),\n    highlightTheme: conf.get('highlight.theme'),\n    highlightStylesheet: conf.get('highlight.stylesheet')\n  }\n\n  if (fromFile) {\n    windowOptions.filePath = fileOrContent\n  } else {\n    windowOptions.contents = fileOrContent\n  }\n\n  return windowOptions\n}\n\nfunction registerEmojiProtocol () {\n  const protocol = require('electron').protocol\n  const emojiPath = path.resolve(path.dirname(require.resolve('emojify.js')), '..', 'images', 'basic')\n\n  protocol.registerFileProtocol(\n    'emoji',\n    function (req, callback) {\n      var emoji = url.parse(req.url).hostname\n      callback({\n        path: path.join(emojiPath, emoji + '.png')\n      })\n    },\n    function (err) {\n      if (err) {\n        console.error('failed to register protocol')\n      }\n    }\n  )\n}\n\nfunction openFileDialog (win, openInNewWindow) {\n  var dialogOptions = {\n    title: 'Select markdown file',\n    properties: [ 'openFile' ],\n    filters: [\n      {\n        name: 'Markdown',\n        extensions: markdownExtensions\n      },\n      {\n        name: 'Al files',\n        extensions: [ '*' ]\n      }\n    ]\n  }\n\n  win && dialog.showOpenDialog(win, dialogOptions, function (filePaths) {\n    if (!Array.isArray(filePaths) || !filePaths.length) {\n      return\n    }\n\n    if (!openInNewWindow) {\n      return sharedState.setFilePath(win.id, filePaths[0])\n    }\n\n    createWindow(createWindowOptions(true, filePaths[0]))\n  })\n}\n\nfunction addApplicationMenu () {\n  // menu\n  var vmdSubmenu = [\n    {\n      label: 'Close window',\n      accelerator: 'CmdOrCtrl+W',\n      role: 'close'\n    },\n    {\n      label: 'Quit',\n      accelerator: 'CmdOrCtrl+Q',\n      click: function () {\n        app.quit()\n      }\n    }\n  ]\n\n  if (process.platform === 'darwin') {\n    vmdSubmenu = [\n      {\n        label: 'About vmd',\n        selector: 'orderFrontStandardAboutPanel:'\n      },\n      {\n        type: 'separator'\n      }\n    ].concat(vmdSubmenu)\n  }\n\n  // Doc: https://github.com/atom/electron/blob/master/docs/api/menu-item.md\n  var template = [\n    {\n      label: 'vmd',\n      submenu: vmdSubmenu\n    },\n    {\n      label: 'File',\n      submenu: [\n        {\n          label: 'Open',\n          accelerator: 'CmdOrCtrl+O',\n          click: function (model, item, win) {\n            openFileDialog(win, false)\n          }\n        },\n        {\n          label: 'Open in new window',\n          accelerator: 'CmdOrCtrl+Shift+O',\n          click: function (model, item, win) {\n            openFileDialog(win, true)\n          }\n        },\n        {\n          label: 'Print',\n          accelerator: 'CmdOrCtrl+P',\n          click: function (model, item, win) {\n            win && win.webContents.send('print')\n          }\n        }\n      ]\n    },\n    {\n      label: 'Edit',\n      submenu: [\n        {\n          label: 'Copy',\n          accelerator: 'CmdOrCtrl+C',\n          role: 'copy',\n          enabled: function (model) {\n            return model && !!model.selection\n          }\n        },\n        {\n          label: 'Select All',\n          accelerator: 'CmdOrCtrl+A',\n          role: 'selectall'\n        }\n      ]\n    },\n    {\n      label: 'History',\n      submenu: [\n        {\n          label: 'Back',\n          accelerator: 'Alt+Left',\n          click: function (model, item, win) {\n            win && win.webContents.send('history-back')\n          },\n          enabled: function (model) {\n            return model.history && model.history.canGoBack\n          }\n        },\n        {\n          label: 'Forward',\n          accelerator: 'Alt+Right',\n          click: function (model, item, win) {\n            win && win.webContents.send('history-forward')\n          },\n          enabled: function (model) {\n            return model.history && model.history.canGoForward\n          }\n        }\n      ]\n    },\n    {\n      label: 'View',\n      submenu: [\n        {\n          label: 'Zoom In',\n          accelerator: 'CmdOrCtrl+Plus',\n          click: function (model, item, win) {\n            win && win.webContents.send('zoom-in')\n          }\n        },\n        {\n          label: 'Zoom Out',\n          accelerator: 'CmdOrCtrl+-',\n          click: function (model, item, win) {\n            win && win.webContents.send('zoom-out')\n          }\n        },\n        {\n          label: 'Reset Zoom',\n          accelerator: 'CmdOrCtrl+0',\n          click: function (model, item, win) {\n            win && win.webContents.send('zoom-reset')\n          }\n        },\n        {\n          label: 'Toggle Developer Tools',\n          accelerator: (function () {\n            if (process.platform === 'darwin') {\n              return 'Alt+Command+I'\n            } else {\n              return 'Ctrl+Shift+I'\n            }\n          })(),\n          click: function (model, item, win) {\n            win && win.toggleDevTools()\n          }\n        }\n      ]\n    }\n  ]\n\n  var menu = createMenu(template, {})\n\n  sharedState.subscribe(function () {\n    menu.update(sharedState.getFocusedWindowState() || {})\n  })\n\n  Menu.setApplicationMenu(menu.getMenu())\n}\n","/home/travis/build/npmtest/node-npmtest-vmd/node_modules/vmd/node_modules/electron/index.js":"var fs = require('fs')\nvar path = require('path')\n\nvar pathFile = path.join(__dirname, 'path.txt')\n\nif (fs.existsSync(pathFile)) {\n  module.exports = path.join(__dirname, fs.readFileSync(pathFile, 'utf-8'))\n} else {\n  throw new Error('Electron failed to install correctly, please delete node_modules/' + path.basename(__dirname) + ' and try installing again')\n}\n","/home/travis/build/npmtest/node-npmtest-vmd/node_modules/vmd/main/create-window.js":"const path = require('path')\nconst fs = require('fs')\nconst BrowserWindow = require('electron').BrowserWindow\nconst ipc = require('electron').ipcMain\nconst chokidar = require('chokidar')\nconst assign = require('object-assign')\nconst sharedState = require('../shared/shared-state')\nconst styles = require('./styles')\nconst windowStateKeeper = require('electron-window-state')\n\nconst defaultOptions = {\n  width: 800,\n  height: 600,\n  x: undefined,\n  y: undefined\n}\n\nmodule.exports = function createWindow (options) {\n  const preservestate = options.window.preservestate && options.window.preservestate !== 'false'\n\n  if (preservestate) {\n    var mainWindowState = windowStateKeeper({\n      file: 'vmd-window-state.json',\n      defaultWidth: defaultOptions.width,\n      defaultHeight: defaultOptions.height\n    })\n    options = assign({}, mainWindowState, options)\n  } else {\n    options = assign({}, defaultOptions, options)\n  }\n\n  const fromFile = typeof options.filePath !== 'undefined'\n  var watcher\n\n  var preloadPath = path.resolve(__dirname, 'client-api.js')\n\n  var win = new BrowserWindow({\n    webPreferences: {\n      preload: preloadPath\n    },\n    icon: path.join(__dirname, 'assets/app-icon/png/512.png'),\n    width: options.width,\n    height: options.height,\n    x: options.x,\n    y: options.y\n  })\n\n  updateTitle()\n\n  temporarilyInterceptFileProtocol()\n  win.loadURL('file://' + path.join(__dirname, '/../renderer/vmd.html'))\n  win.on('close', onClose)\n  win.webContents.on('did-finish-load', sendMarkdown)\n\n  win.on('closed', function () {\n    win = null\n  })\n\n  win.on('focus', function () {\n    sharedState.setFocusedWindow(win.id)\n  })\n\n  if (win.isFocused()) {\n    sharedState.setFocusedWindow(win.id)\n  }\n\n  if (preservestate) {\n    mainWindowState.manage(win)\n  }\n\n  if (options.devTools) {\n    win.openDevTools()\n  }\n\n  if (fromFile) {\n    watcher = chokidar.watch(options.filePath, { usePolling: true })\n    watcher.on('change', sendMarkdown)\n  }\n\n  ipc.on('open-file', onOpenFile)\n\n  sharedState.subscribe(function () {\n    if (!win) {\n      return\n    }\n\n    var state = sharedState.getWindowState(win.id)\n\n    if (state && state.filePath && state.filePath !== options.filePath) {\n      changeFile(state.filePath)\n    }\n  })\n\n  function onOpenFile (ev, filePath) {\n    if (ev.sender === win.webContents) {\n      createWindow(assign({}, options, {\n        filePath: filePath\n      }))\n    }\n  }\n\n  function onClose () {\n    if (watcher) {\n      watcher.close()\n    }\n\n    ipc.removeListener('open-file', onOpenFile)\n  }\n\n  function updateTitle () {\n    var prefix =\n      options.title ||\n      (fromFile && (path.basename(options.filePath)))\n\n    win.setTitle(prefix ? prefix + ' - vmd' : 'vmd')\n\n    // (OS X) Set represented filename (icon in title bar)\n    if (fromFile && process.platform === 'darwin') {\n      win.setRepresentedFilename(path.resolve(options.filePath))\n    }\n  }\n\n  function changeFile (filePath) {\n    if (watcher) {\n      watcher.unwatch(options.filePath)\n      watcher.add(filePath)\n    }\n\n    options.filePath = filePath\n    updateTitle()\n    sendMarkdown()\n  }\n\n  function sendMarkdown () {\n    const resolved = fromFile\n      ? path.resolve(path.dirname(options.filePath))\n      : process.cwd()\n\n    var baseUrl = path.relative(__dirname, resolved)\n    if (baseUrl) baseUrl += '/'\n\n    if (win) {\n      var contents = fromFile\n        ? fs.readFileSync(options.filePath, { encoding: 'utf8' })\n        : options.contents\n\n      win.webContents.send('md', {\n        filePath: options.filePath,\n        baseUrl: baseUrl,\n        contents: contents\n      })\n    }\n  }\n\n  function temporarilyInterceptFileProtocol () {\n    // very hacky way to dynamically create vmd.html\n    const protocol = require('electron').protocol\n    const template = require('lodash.template')\n    const indexHtml = template(fs.readFileSync(path.join(__dirname, '..', 'renderer', 'vmd.html'), { encoding: 'utf-8' }))\n\n    protocol.interceptStringProtocol(\n      'file',\n      function (req, callback) {\n        var mainStyle = options.mainStylesheet\n          ? styles.getStylesheet(options.mainStylesheet)\n          : styles.getStylesheet(require.resolve('github-markdown-css'))\n\n        var extraStyle = options.extraStylesheet\n          ? styles.getStylesheet(options.extraStylesheet)\n          : ''\n\n        var highlightStyle = options.highlightStylesheet\n          ? styles.getStylesheet(options.highlightStylesheet)\n          : styles.getHighlightTheme('default') + '\\n' + styles.getHighlightTheme(options.highlightTheme)\n\n        var data = {\n          mainStyle: mainStyle,\n          extraStyle: extraStyle,\n          highlightStyle: highlightStyle\n        }\n        callback({\n          mimeType: 'text/html',\n          data: indexHtml(data)\n        })\n\n        process.nextTick(function () {\n          protocol.uninterceptProtocol('file')\n        })\n      },\n      function (err, scheme) {\n        if (err) {\n          console.error('failed to register', scheme, 'protocol')\n        }\n      }\n    )\n  }\n\n  return {\n    win: win,\n    changeFile: changeFile\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-vmd/node_modules/vmd/shared/shared-state.js":"const assign = require('object-assign')\nconst createStore = require('redux').createStore\nconst combineReducers = require('redux').combineReducers\nconst BrowserWindow = require('electron').BrowserWindow\n\nconst sharedState = combineReducers({\n  focusedWindow: focusedWindow,\n  windows: windows\n})\n\nvar store = createStore(sharedState)\n\nfunction focusedWindowAction (action) {\n  var fw = BrowserWindow.getFocusedWindow()\n\n  if (typeof action.windowId === 'undefined' && fw) {\n    action.windowId = fw.id\n  }\n\n  return action\n}\n\nconst actions = {\n\n  setFocusedWindow: function (windowId) {\n    store.dispatch(focusedWindowAction({\n      type: 'SET_FOCUSED_WINDOW',\n      windowId: windowId\n    }))\n  },\n\n  setFilePath: function (windowId, filePath) {\n    store.dispatch(focusedWindowAction({\n      type: 'SET_FILE_PATH',\n      windowId: windowId,\n      filePath: filePath\n    }))\n  },\n\n  setSelection: function (windowId, selection) {\n    store.dispatch(focusedWindowAction({\n      type: 'SET_SELECTION',\n      windowId: windowId,\n      selection: selection\n    }))\n  },\n\n  clearSelection: function (windowId) {\n    store.dispatch(focusedWindowAction({\n      type: 'CLEAR_SELECTION',\n      windowId: windowId\n    }))\n  },\n\n  setHistoryStatus: function (windowId, data) {\n    store.dispatch(focusedWindowAction({\n      type: 'SET_HISTORY_STATUS',\n      windowId: windowId,\n      canGoBack: data.canGoBack,\n      canGoForward: data.canGoForward\n    }))\n  }\n}\n\nfunction focusedWindow (state, action) {\n  if (typeof state === 'undefined') {\n    return null\n  }\n\n  switch (action.type) {\n    case 'SET_FOCUSED_WINDOW':\n      return action.windowId\n\n    default:\n      return state\n  }\n}\n\nfunction win (state, action) {\n  if (typeof state === 'undefined') {\n    return {\n      id: action.windowId\n    }\n  }\n\n  if (state.id !== action.windowId) {\n    return state\n  }\n\n  switch (action.type) {\n    case 'SET_FILE_PATH':\n      return assign({}, state, {\n        filePath: action.filePath\n      })\n\n    case 'SET_HISTORY_STATUS':\n      return assign({}, state, {\n        history: {\n          canGoBack: action.canGoBack,\n          canGoForward: action.canGoForward\n        }\n      })\n\n    case 'SET_SELECTION':\n      return assign({}, state, {\n        selection: action.selection\n      })\n\n    case 'CLEAR_SELECTION':\n      return assign({}, state, {\n        selection: null\n      })\n\n    default:\n      return state\n  }\n}\n\nfunction windows (state, action) {\n  if (typeof state === 'undefined') {\n    return []\n  }\n\n  switch (action.type) {\n    case 'SET_FILE_PATH':\n    case 'SET_SELECTION':\n    case 'CLEAR_SELECTION':\n    case 'SET_HISTORY_STATUS':\n      var newState = state.slice(0)\n\n      var index = state.findIndex(function (w) {\n        return w.id === action.windowId\n      })\n\n      if (index === -1) {\n        newState = newState.concat(win(undefined, action))\n      }\n\n      return newState.map(function (w) {\n        return win(w, action)\n      })\n\n    default:\n      return state\n  }\n}\n\nfunction getFocusedWindowState () {\n  var fw = BrowserWindow.getFocusedWindow()\n  return fw && getWindowState(fw.id)\n}\n\nfunction getWindowState (windowId) {\n  return store.getState().windows\n    .find(function (w) {\n      return w.id === windowId\n    })\n}\n\nmodule.exports = assign({}, actions, {\n  subscribe: store.subscribe,\n  getState: store.getState,\n  getWindowState: getWindowState,\n  getFocusedWindowState: getFocusedWindowState\n})\n","/home/travis/build/npmtest/node-npmtest-vmd/node_modules/vmd/main/styles.js":"const path = require('path')\nconst fs = require('fs')\nconst app = require('electron').app\nconst postcss = require('postcss')\nconst postcssImportant = require('postcss-safe-important')\n\nexports.getHighlightThemes = function () {\n  var themesPath = path.resolve(require.resolve('highlight.js'), '../..', 'styles')\n\n  try {\n    return fs.readdirSync(themesPath)\n      .filter(function (name) {\n        return path.extname(name) === '.css' && name !== 'default.css'\n      })\n      .map(function (name) {\n        return path.basename(name, '.css')\n      })\n  } catch (ex) {\n    return []\n  }\n}\n\nexports.getHighlightTheme = function (theme) {\n  var themePath = path.resolve(require.resolve('highlight.js'), '../..', 'styles', theme + '.css')\n\n  try {\n    var themeStyles = fs.readFileSync(themePath, 'utf-8')\n    return postcss(postcssImportant).process(themeStyles).css\n  } catch (ex) {\n    console.error('Cannot load theme', theme + ':', ex.code === 'ENOENT' ? 'no such file' : ex.message)\n    app.exit(1)\n  }\n}\n\nexports.getStylesheet = function (filePath) {\n  var stylePath = path.resolve(filePath)\n\n  try {\n    return fs.readFileSync(stylePath, 'utf-8')\n  } catch (ex) {\n    console.error('Cannot load style', filePath + ':', ex.code === 'ENOENT' ? 'no such file' : ex.message)\n    app.exit(1)\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-vmd/node_modules/vmd/bin/cli.js":"#!/usr/bin/env node\nconst spawn = require('child_process').spawn\nconst electron = require('electron')\nconst path = require('path')\nconst serverPath = path.join(__dirname, '../main/main.js')\n\nvar args = [ serverPath ]\n  .concat([].concat(process.argv).splice(2))\n  .concat('--not-packaged=true')\n\nvar proc = spawn(electron, args, { stdio: 'inherit' })\nproc.on('close', function (code) {\n  process.exit(code)\n})\n","/home/travis/build/npmtest/node-npmtest-vmd/node_modules/vmd/main/client-api.js":"/* global vmd:true */\n\nconst assign = require('object-assign')\n\nconst electron = {\n  ipc: require('electron').ipcRenderer,\n  sharedState: require('electron').remote.require('../shared/shared-state')\n}\n\n// no var/let/const on purpose\nvmd = assign({\n  openFile: function (filePath) {\n    electron.ipc.send('open-file', filePath)\n  },\n\n  on: function (eventName, listener) {\n    if (!electron.ipc) { return }\n    electron.ipc.on(eventName, listener)\n  },\n\n  off: function (eventName, listener) {\n    if (!electron.ipc) { return }\n    if (typeof listener !== 'function') { return }\n    return electron.ipc.removeListener(eventName, listener)\n  },\n\n  onPrintAction: function (callback) {\n    vmd.on('print', callback)\n  },\n\n  onHistoryBackAction: function (callback) {\n    vmd.on('history-back', callback)\n  },\n\n  onHistoryForwardAction: function (callback) {\n    vmd.on('history-forward', callback)\n  },\n\n  onZoomInAction: function (callback) {\n    vmd.on('zoom-in', callback)\n  },\n\n  onZoomOutAction: function (callback) {\n    vmd.on('zoom-out', callback)\n  },\n\n  onZoomResetAction: function (callback) {\n    vmd.on('zoom-reset', callback)\n  },\n\n  onContent: function (callback) {\n    vmd.on('md', callback)\n  }\n}, electron.sharedState)\n","/home/travis/build/npmtest/node-npmtest-vmd/node_modules/vmd/main/config.js":"const path = require('path')\nconst fs = require('fs')\nconst minimist = require('minimist')\n\nconst isPackaged = process.argv.indexOf('--not-packaged=true') === -1\nconst argvSpliceStart = isPackaged ? 1 : 2\nconst argv = minimist([].concat(process.argv).splice(argvSpliceStart))\n\nconst defaults = fs.readFileSync(path.join(__dirname, '../defaults.yml'), 'utf-8')\n\nconst aliases = {\n  v: 'version',\n  h: 'help',\n  t: 'title',\n  d: 'devtools',\n  z: 'zoom'\n}\n\nmodule.exports = require('rucola')('vmd', defaults, aliases, argv)\n","/home/travis/build/npmtest/node-npmtest-vmd/node_modules/vmd/renderer/history.js":"const deepEqual = require('deep-equal')\n\nmodule.exports = function () {\n  var history = []\n  var currentPosition = null\n  var listeners = []\n\n  function cut () {\n    if (currentPosition !== null) {\n      history = history.slice(0, currentPosition + 1)\n    }\n  }\n\n  function push (item) {\n    if (deepEqual(item, current())) {\n      return current()\n    }\n\n    cut()\n    history.push(item)\n\n    if (currentPosition === null) {\n      currentPosition = 0\n    } else {\n      currentPosition += 1\n    }\n\n    process.nextTick(notifyListeners)\n    return current()\n  }\n\n  function canGoBack (steps) {\n    if (typeof steps === 'undefined') {\n      steps = 1\n    }\n\n    return currentPosition - steps >= 0\n  }\n\n  function canGoForward (steps) {\n    if (typeof steps === 'undefined') {\n      steps = 1\n    }\n\n    return currentPosition + steps <= history.length - 1\n  }\n\n  function back (steps) {\n    if (typeof steps === 'undefined') {\n      steps = 1\n    }\n\n    if (canGoBack(steps)) {\n      currentPosition -= steps\n    } else {\n      currentPosition = 0\n    }\n\n    process.nextTick(notifyListeners)\n    return current()\n  }\n\n  function forward (steps) {\n    if (typeof steps === 'undefined') {\n      steps = 1\n    }\n\n    if (canGoForward(steps)) {\n      currentPosition += steps\n    } else {\n      currentPosition = history.length - 1\n    }\n\n    process.nextTick(notifyListeners)\n    return current()\n  }\n\n  function current () {\n    if (!history.length) {\n      return null\n    }\n\n    return history[currentPosition]\n  }\n\n  function subscribe (listener) {\n    listeners.push(listener)\n    var isSubscribed = true\n\n    return function unsubscribe () {\n      if (!isSubscribed) {\n        return\n      }\n\n      isSubscribed = false\n      var index = listeners.indexOf(listener)\n      listeners.splice(index, 1)\n    }\n  }\n\n  function notifyListeners () {\n    listeners.slice().forEach(function (listener) {\n      listener()\n    })\n  }\n\n  return {\n    push: push,\n    canGoBack: canGoBack,\n    canGoForward: canGoForward,\n    back: back,\n    forward: forward,\n    current: current,\n    subscribe: subscribe\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-vmd/node_modules/vmd/renderer/main.js":"/* global vmd:true */\n\nconst remote = require('electron').remote\nconst url = remote.require('url')\nconst path = remote.require('path')\nconst fs = remote.require('fs')\nconst shell = remote.shell\nconst clipboard = remote.clipboard\nconst nativeImage = remote.nativeImage\nconst conf = remote.getGlobal('conf')\nconst currentWindow = remote.getCurrentWindow()\nconst renderMarkdown = require('./render-markdown')\nconst createMenu = require('../shared/create-menu')\nconst hist = require('./history')()\nconst zoom = require('./zoom')(conf.zoom)\n\nhist.subscribe(function () {\n  vmd.setHistoryStatus(currentWindow.id, {\n    canGoBack: hist.canGoBack(),\n    canGoForward: hist.canGoForward()\n  })\n})\n\nfunction isMarkdownPath (filePath) {\n  // http://superuser.com/questions/249436/file-extension-for-markdown-files\n  return [\n    '.markdown',\n    '.mdown',\n    '.mkdn',\n    '.md',\n    '.mkd',\n    '.mdwn',\n    '.mdtxt',\n    '.mdtext'\n  ].indexOf(path.extname(filePath)) !== -1\n}\n\nfunction getImageDataUrl (imageUrl, callback) {\n  var img = new window.Image()\n\n  img.onload = function () {\n    var canvas = document.createElement('canvas')\n    canvas.width = img.naturalWidth\n    canvas.height = img.naturalHeight\n\n    canvas.getContext('2d').drawImage(img, 0, 0)\n\n    callback(null, canvas.toDataURL('image/png'))\n  }\n\n  img.src = imageUrl\n}\n\nfunction copyImageToClipboard (imageInfo, callback) {\n  if (!imageInfo) {\n    if (typeof callback === 'function') {\n      return callback(new Error('no image info'))\n    }\n  }\n\n  if (imageInfo.type === 'external') {\n    return getImageDataUrl(imageInfo.href, function (err, dataUrl) {\n      if (err) {\n        return\n      }\n\n      try {\n        clipboard.writeImage(nativeImage.createFromDataURL(dataUrl))\n      } catch (ex) {\n        console.log(ex)\n      }\n    })\n  }\n\n  if (imageInfo.type === 'file') {\n    try {\n      return clipboard.writeImage(nativeImage.createFromPath(imageInfo.path))\n    } catch (ex) {\n      console.log(ex)\n    }\n  }\n}\n\nfunction scrollToHash (hash) {\n  if (!hash) {\n    return document.body.scrollIntoView(true)\n  }\n\n  hash = hash.slice(1)\n  var el = document.getElementById(hash) || document.querySelector('a[name=\"' + hash + '\"]')\n\n  if (el) {\n    el.scrollIntoView(true)\n  }\n}\n\nfunction navigateTo (item) {\n  if (item === null) {\n    return\n  }\n\n  const currentFilePath = document.body.getAttribute('data-filepath')\n  const isSameFile = !item.filePath || (currentFilePath === item.filePath)\n\n  if (isSameFile) {\n    return scrollToHash(item.hash)\n  }\n\n  if (item.filePath) {\n    vmd.setFilePath(currentWindow.id, item.filePath)\n  }\n}\n\nfunction findClosestNode (nodeName, el) {\n  for (; el && el !== document; el = el.parentNode) {\n    if (el.nodeName === nodeName) {\n      return el\n    }\n  }\n\n  return null\n}\n\nconst findClosestLink = findClosestNode.bind(null, 'A')\nconst findClosestImage = findClosestNode.bind(null, 'IMG')\n\nfunction getLinkType (el) {\n  if (!el) {\n    return null\n  }\n\n  const href = el.getAttribute('href') || el.getAttribute('src')\n\n  if (!href) {\n    return null\n  }\n\n  const filePath = document.body.getAttribute('data-filepath')\n  const parsedHref = url.parse(href)\n  const hash = parsedHref.hash\n  const protocol = parsedHref.protocol\n  const pathname = parsedHref.pathname\n\n  if (protocol && protocol !== 'file:') {\n    return {\n      type: 'external',\n      href: href\n    }\n  }\n\n  if (hash && !protocol && !pathname) {\n    return {\n      type: 'hash',\n      path: filePath,\n      hash: hash\n    }\n  }\n\n  if (filePath && pathname) {\n    try {\n      const targetPath = path.resolve(path.dirname(filePath), pathname)\n      const stat = fs.statSync(targetPath)\n\n      if (stat.isFile()) {\n        if (hash && filePath === targetPath) {\n          return {\n            type: 'hash',\n            path: filePath,\n            hash: hash\n          }\n        }\n\n        if (isMarkdownPath(targetPath)) {\n          return {\n            type: 'markdown-file',\n            path: targetPath\n          }\n        }\n\n        return {\n          type: 'file',\n          path: targetPath\n        }\n      }\n\n      if (stat.isDirectory()) {\n        return {\n          type: 'directory',\n          path: targetPath\n        }\n      }\n    } catch (ex) {\n      console.log(ex)\n    }\n  }\n\n  return null\n}\n\nfunction handleLink (ev) {\n  var link = getLinkType(findClosestLink(ev.target))\n\n  if (!link) {\n    return\n  }\n\n  if (link.type === 'external') {\n    return shell.openExternal(link.href)\n  }\n\n  if (link.type === 'hash') {\n    return navigateTo(hist.push({\n      filePath: link.path,\n      hash: link.hash\n    }))\n  }\n\n  if (link.type === 'directory' || link.type === 'file') {\n    return shell.openItem(link.path)\n  }\n\n  if (link.type === 'markdown-file') {\n    if (ev.shiftKey) {\n      return vmd.openFile(link.path)\n    }\n\n    return navigateTo(hist.push({\n      filePath: link.path\n    }))\n  }\n}\n\nfunction updateSelection () {\n  var selection = window.getSelection()\n\n  if (selection) {\n    var str = selection.toString()\n\n    if (str) {\n      return vmd.setSelection(currentWindow.id, selection.toString())\n    }\n  }\n\n  vmd.clearSelection(currentWindow.id)\n}\n\nvmd.onPrintAction(function () {\n  window.print()\n})\n\nvmd.onZoomInAction(zoom.zoomIn.bind(zoom))\nvmd.onZoomOutAction(zoom.zoomOut.bind(zoom))\nvmd.onZoomResetAction(zoom.reset.bind(zoom))\n\nvmd.onHistoryBackAction(function () {\n  navigateTo(hist.back())\n})\n\nvmd.onHistoryForwardAction(function () {\n  navigateTo(hist.forward())\n})\n\nvmd.onContent(function (ev, data) {\n  const md = renderMarkdown(data.contents)\n  const body = document.body\n  const base = document.querySelector('base')\n  const mdBody = document.querySelector('.markdown-body')\n\n  if (data.filePath) {\n    body.setAttribute('data-filepath', data.filePath)\n\n    if (hist.current() === null) {\n      hist.push({ filePath: data.filePath })\n    }\n  } else {\n    hist.push({ hash: '' })\n  }\n\n  if (data.baseUrl) {\n    base.setAttribute('href', data.baseUrl)\n  }\n\n  mdBody.innerHTML = md\n})\n\nwindow.addEventListener('click', function (ev) {\n  ev.preventDefault()\n  handleLink(ev)\n})\n\nwindow.addEventListener('keydown', function (ev) {\n  var esc = ev.keyCode === 27\n\n  if (esc) currentWindow.close()\n})\n\nwindow.addEventListener('mouseup', function (ev) {\n  updateSelection()\n})\n\nwindow.addEventListener('keyup', function (ev) {\n  updateSelection()\n})\n\ndocument.addEventListener('drop', function (ev) {\n  ev.preventDefault()\n  ev.stopPropagation()\n\n  var filePath = ev.dataTransfer.files.length && ev.dataTransfer.files[0].path\n\n  if (!filePath || !isMarkdownPath(filePath)) {\n    return\n  }\n\n  if (ev.shiftKey) {\n    return vmd.openFile(filePath)\n  }\n\n  vmd.setFilePath(currentWindow.id, filePath)\n})\n\ndocument.addEventListener('dragover', function (ev) {\n  ev.preventDefault()\n  ev.stopPropagation()\n})\n\nsetInterval(function () {\n  updateSelection()\n}, 1000)\n\nfunction addContextMenu () {\n  var template = [\n    {\n      label: 'Open folder',\n      click: function (model) {\n        return model.link && shell.openItem(model.link.path)\n      },\n      visible: function (model) {\n        return model.link && model.link.type === 'directory'\n      }\n    },\n    {\n      label: 'Open file',\n      click: function (model) {\n        if (model.link && model.link.type === 'file') {\n          return model.link && shell.openItem(model.link.path)\n        }\n\n        if (model.link && model.link.type === 'markdown-file') {\n          return navigateTo(hist.push({\n            filePath: model.link.path\n          }))\n        }\n      },\n      visible: function (model) {\n        return model.link && (model.link.type === 'file' || model.link.type === 'markdown-file')\n      }\n    },\n    {\n      label: 'Open image',\n      click: function (model) {\n        return model.img && shell.openItem(model.img.path)\n      },\n      visible: function (model) {\n        return model.img && model.img.type === 'file'\n      }\n    },\n    {\n      label: 'Open file in new window',\n      click: function (model) {\n        return model.link && vmd.openFile(model.link.path)\n      },\n      visible: function (model) {\n        return model.link && model.link.type === 'markdown-file'\n      }\n    },\n    {\n      label: 'Scroll to anchor',\n      click: function (model) {\n        return model.link && navigateTo(hist.push({\n          filePath: model.link.path,\n          hash: model.link.hash\n        }))\n      },\n      visible: function (model) {\n        return model.link && model.link.type === 'hash'\n      }\n    },\n    {\n      label: 'Open link',\n      click: function (model) {\n        return model.link && shell.openExternal(model.link.href)\n      },\n      visible: function (model) {\n        return model.link && model.link.type === 'external'\n      }\n    },\n    {\n      type: 'separator',\n      visible: function (model) {\n        return !!model.link\n      }\n    },\n    {\n      label: 'Copy',\n      role: 'copy',\n      visible: function (model) {\n        return !!model.selection\n      }\n    },\n    {\n      label: 'Copy link address',\n      click: function (model) {\n        return model.link && clipboard.writeText(model.link.href)\n      },\n      visible: function (model) {\n        return model.link && model.link.type === 'external'\n      }\n    },\n    {\n      label: 'Copy image address',\n      click: function (model) {\n        return model.img && clipboard.writeText(model.img.href)\n      },\n      visible: function (model) {\n        return model.img && model.img.type === 'external'\n      }\n    },\n    {\n      label: 'Copy path',\n      click: function (model) {\n        return model.link && clipboard.writeText(model.link.path)\n      },\n      visible: function (model) {\n        var types = [\n          'directory',\n          'file',\n          'markdown-file'\n        ]\n        return model.link && types.indexOf(model.link.type) !== -1\n      }\n    },\n    {\n      label: 'Copy image path',\n      click: function (model) {\n        return model.img && clipboard.writeText(model.img.path)\n      },\n      visible: function (model) {\n        return model.img && model.img.type === 'file'\n      }\n    },\n    {\n      label: 'Copy image',\n      click: function (model) {\n        return model.img && copyImageToClipboard(model.img)\n      },\n      visible: function (model) {\n        return !!model.img\n      }\n    },\n    {\n      label: 'Select All',\n      role: 'selectall'\n    },\n    {\n      type: 'separator'\n    },\n    {\n      label: 'Inspect Element',\n      click: function (model, item, win) {\n        win && win.inspectElement(model.x, model.y)\n      }\n    }\n  ]\n\n  var contextMenu = createMenu(template, {})\n\n  window.addEventListener('contextmenu', function (ev) {\n    ev.preventDefault()\n\n    var selection = window.getSelection()\n    var selectionText = selection && selection.toString()\n\n    var el = document.elementFromPoint(ev.x, ev.y) || null\n\n    contextMenu.update({\n      x: ev.x,\n      y: ev.y,\n      selection: selectionText,\n      element: el,\n      link: getLinkType(findClosestLink(el)),\n      img: getLinkType(findClosestImage(el))\n    })\n\n    contextMenu.getMenu().popup(currentWindow)\n  }, false)\n}\n\naddContextMenu()\n","/home/travis/build/npmtest/node-npmtest-vmd/node_modules/vmd/renderer/render-markdown.js":"const assign = require('object-assign')\nconst remark = require('remark')\nconst slug = require('remark-slug')\nconst hljs = require('remark-highlight.js')\nconst emojiToGemoji = require('remark-emoji-to-gemoji')\nconst html = require('remark-html')\nconst visit = require('unist-util-visit')\nconst toString = require('mdast-util-to-string')\n\nmodule.exports = renderMarkdown\n\nconst renderer = remark()\n  .use(emojiToGemoji)\n  .use(gemojiToImages)\n  .use(fixHeadings)\n  .use(fixCheckListStyles)\n  .use(slug)\n  .use([hljs, html], {\n    sanitize: false\n  })\n\nfunction renderMarkdown (text) {\n  return renderer.process(text).toString()\n}\n\nfunction gemojiToImages (remark) {\n  function extractTextNode (string, start, end) {\n    const startLine = string.slice(0, start).split('\\n')\n    const endLine = string.slice(0, end).split('\\n')\n\n    const position = {\n      start: {\n        line: startLine.length,\n        column: startLine[startLine.length - 1].length + 1\n      },\n      end: {\n        line: endLine.length,\n        column: endLine[endLine.length - 1].length + 1\n      }\n    }\n\n    const textNode = {\n      type: 'text',\n      value: string.slice(start, end),\n      position: position\n    }\n\n    return textNode\n  }\n\n  return function transformer (tree) {\n    const reg = /:([^:]+):/g\n\n    visit(tree, 'text', function (node, index, parent) {\n      // Because adding nodes to parent.children changes the indices and the\n      // index provided by `visit` is therefore wrong we need to find the new\n      // index\n      const actualIndex = parent.children.reduce(function (actualIndex, child, index) {\n        return child === node ? index : actualIndex\n      }, null)\n\n      const nodes = []\n      let lastIndex = 0\n      let m\n\n      while ((m = reg.exec(node.value)) !== null) {\n        const gemojiLength = m[0].length\n        const gemojiName = m[1]\n\n        if (m.index !== lastIndex) {\n          const textNode = extractTextNode(node.value, lastIndex, m.index)\n          lastIndex += textNode.value.length\n          nodes.push(textNode)\n        }\n\n        const imageNode = {\n          type: 'image',\n          data: {\n            hProperties: {\n              align: 'absmiddle',\n              alt: ':' + gemojiName + ':',\n              className: 'emoji'\n            }\n          },\n          url: 'emoji://' + gemojiName,\n          title: ':' + gemojiName + ':'\n        }\n\n        nodes.push(imageNode)\n\n        lastIndex += gemojiLength\n      }\n\n      if (lastIndex !== node.value.length) {\n        const textNode = extractTextNode(node.value, lastIndex, node.value.length)\n        nodes.push(textNode)\n      }\n\n      const beforeNodes = parent.children.slice(0, actualIndex)\n      const afterNodes = parent.children.slice(actualIndex + 1)\n\n      parent.children = [].concat(\n        beforeNodes,\n        nodes,\n        afterNodes\n      )\n    })\n  }\n}\n\nfunction fixCheckListStyles (remark) {\n  return function transformer (tree) {\n    visit(tree, 'listItem', function (node) {\n      if (node.checked !== null) {\n        const data = patchNode(node, 'data', {})\n        patchNode(data, 'hProperties', {\n          className: 'task-list-item'\n        })\n      }\n    })\n  }\n}\n\nfunction fixHeadings (remark) {\n  const reg = /^([#]+)\\s?(.+)$/\n\n  return function transformer (tree) {\n    visit(tree, 'paragraph', function (node, index, parent) {\n      const nodeText = toString(node)\n      if (parent.type === 'root' && reg.test(nodeText)) {\n        const nodeTextParts = reg.exec(nodeText)\n        node.type = 'heading'\n        node.depth = nodeTextParts[1].length\n\n        node.children = [].concat(node.children)\n          .map(function (child, index) {\n            if (child.type === 'text' && index === 0) {\n              return assign({}, child, {\n                value: nodeTextParts[2]\n              })\n            }\n          })\n      }\n    })\n  }\n}\n\nfunction patchNode (context, key, value) {\n  if (!context[key]) {\n    context[key] = value\n  }\n\n  return context[key]\n}\n","/home/travis/build/npmtest/node-npmtest-vmd/node_modules/vmd/renderer/zoom.js":"var zoom = {\n  init: function (zoom) {\n    if (zoom) {\n      this.currentZoom = +zoom\n      this.update()\n      return this\n    }\n\n    this.currentZoom = +window.getComputedStyle(document.body).getPropertyValue('zoom')\n    return this\n  },\n\n  update: function () {\n    document.body.style.zoom = this.currentZoom\n  },\n\n  zoomIn: function () {\n    this.currentZoom += 0.1\n    this.update()\n  },\n\n  zoomOut: function () {\n    this.currentZoom -= 0.1\n    this.update()\n  },\n\n  reset: function () {\n    this.currentZoom = 1\n    this.update()\n  }\n}\n\nmodule.exports = zoom.init.bind(zoom)\n","/home/travis/build/npmtest/node-npmtest-vmd/node_modules/vmd/script/release.js":"#!/usr/bin/env node\n\nconst childProcess = require('child_process')\nconst fs = require('fs')\nconst path = require('path')\nconst util = require('util')\nconst request = require('request')\nconst promiseRetryer = require('promise-retryer')(Promise)\n\nconst token = process.env.GITHUB_ACCESS_TOKEN\nconst version = require('../package').version\nconst repo = 'yoshuawuyts/vmd'\n\ncheckToken()\n  .then(archiveAssets)\n  .then(createRelease)\n  .then(uploadAssets)\n  .then(publishRelease)\n  .catch((err) => {\n    console.error(err.message || err)\n    process.exit(1)\n  })\n\nfunction checkToken () {\n  if (!token) {\n    return Promise.reject('GITHUB_ACCESS_TOKEN environment variable not set\\nSet it to a token with repo scope created from https://github.com/settings/tokens/new')\n  } else {\n    return Promise.resolve(token)\n  }\n}\n\nfunction archiveAssets () {\n  const outPath = path.join(__dirname, '..', 'build')\n\n  const assets = [\n    {\n      name: `vmd-${version}-mac.zip`,\n      path: path.join(outPath, 'vmd-darwin-x64', 'vmd.app')\n    },\n    {\n      name: `vmd-${version}-mac.tar.gz`,\n      path: path.join(outPath, 'vmd-darwin-x64', 'vmd.app')\n    },\n    {\n      name: `vmd-${version}-linux-ia32.zip`,\n      path: path.join(outPath, 'vmd-linux-ia32')\n    },\n    {\n      name: `vmd-${version}-linux-ia32.tar.gz`,\n      path: path.join(outPath, 'vmd-linux-ia32')\n    },\n    {\n      name: `vmd-${version}-linux-x64.zip`,\n      path: path.join(outPath, 'vmd-linux-x64')\n    },\n    {\n      name: `vmd-${version}-linux-x64.tar.gz`,\n      path: path.join(outPath, 'vmd-linux-x64')\n    },\n    {\n      name: `vmd-${version}-win32-ia32.zip`,\n      path: path.join(outPath, 'vmd-win32-ia32')\n    },\n    {\n      name: `vmd-${version}-win32-ia32.tar.gz`,\n      path: path.join(outPath, 'vmd-win32-ia32')\n    },\n    {\n      name: `vmd-${version}-win32-x64.zip`,\n      path: path.join(outPath, 'vmd-win32-x64')\n    },\n    {\n      name: `vmd-${version}-win32-x64.tar.gz`,\n      path: path.join(outPath, 'vmd-win32-x64')\n    }\n  ]\n\n  function archiveAsset (asset) {\n    if (/\\.zip$/.test(asset.name)) {\n      return zipAsset(asset)\n    }\n\n    if (/\\.tar\\.gz$/.test(asset.name)) {\n      return targzAsset(asset)\n    }\n  }\n\n  return Promise.all(assets.map(archiveAsset))\n}\n\nfunction zipAsset (asset) {\n  return new Promise((resolve, reject) => {\n    const assetBase = path.basename(asset.path)\n    const assetDirectory = path.dirname(asset.path)\n    const outPath = path.join(__dirname, '..', 'build', asset.name)\n\n    console.log(`zipping ${assetBase} to ${asset.name}`)\n\n    if (!fs.existsSync(asset.path)) {\n      return reject(new Error(`${asset.path} does not exist`))\n    }\n\n    const command = `zip --recurse-paths --symlinks '${outPath}' '${assetBase}'`\n    const options = {\n      cwd: assetDirectory,\n      maxBuffer: Infinity\n    }\n\n    childProcess.exec(command, options, (err) => {\n      if (err) {\n        reject(err)\n      } else {\n        asset.path = outPath\n        resolve(asset)\n      }\n    })\n  })\n}\n\nfunction targzAsset (asset) {\n  return new Promise((resolve, reject) => {\n    const assetBase = path.basename(asset.path)\n    const assetDirectory = path.dirname(asset.path)\n    const outPath = path.join(__dirname, '..', 'build', asset.name)\n\n    console.log(`gzipping ${assetBase} to ${asset.name}`)\n\n    if (!fs.existsSync(asset.path)) {\n      return reject(new Error(`${asset.path} does not exist`))\n    }\n\n    const command = `tar -czf '${outPath}' '${assetBase}'`\n    const options = {\n      cwd: assetDirectory,\n      maxBuffer: Infinity\n    }\n\n    childProcess.exec(command, options, (err) => {\n      if (err) {\n        reject(err)\n      } else {\n        asset.path = outPath\n        resolve(asset)\n      }\n    })\n  })\n}\n\nfunction createRelease (assets) {\n  const options = {\n    uri: `https://api.github.com/repos/${repo}/releases`,\n    headers: {\n      Authorization: `token ${token}`,\n      'User-Agent': `node/${process.versions.node}`\n    },\n    json: {\n      tag_name: `${version}`,\n      target_commitish: 'master',\n      name: `vmd v${version}`,\n      body: 'An awesome new release :tada:',\n      draft: true,\n      prerelease: false\n    }\n  }\n\n  return new Promise((resolve, reject) => {\n    console.log(`creating new draft release v${version}`)\n\n    request.post(options, (err, response, body) => {\n      if (err) {\n        return reject(Error(`Request failed: ${err.message || err}`))\n      }\n\n      if (response.statusCode !== 201) {\n        return reject(Error(`Non-201 response: ${response.statusCode}\\n${util.inspect(body)}`))\n      }\n\n      resolve({assets: assets, draft: body})\n    })\n  })\n}\n\nfunction publishRelease (release) {\n  const options = {\n    uri: release.draft.url,\n    headers: {\n      Authorization: `token ${token}`,\n      'User-Agent': `node/${process.versions.node}`\n    },\n    json: {\n      draft: false\n    }\n  }\n\n  return new Promise((resolve, reject) => {\n    console.log('publishing release')\n\n    request.post(options, (err, response, body) => {\n      if (err) {\n        return reject(Error(`Request failed: ${err.message || err}`))\n      }\n\n      if (response.statusCode !== 200) {\n        return reject(Error(`Non-200 response: ${response.statusCode}\\n${util.inspect(body)}`))\n      }\n\n      resolve(body)\n    })\n  })\n}\n\nfunction uploadAssets (release) {\n  return Promise.all(release.assets.map((asset) => {\n    return uploadAsset(release.draft, asset)\n  })).then(() => release)\n}\n\nfunction uploadAsset (release, asset) {\n  return promiseRetryer.run({\n    delay: function (attempt) {\n      return attempt * 1000\n    },\n    onAttempt: function (attempt) {\n      console.log(`attempt ${attempt} to upload ${asset.name}`)\n    },\n    onError: function (err, attempt) {\n      console.log(`failed to upload ${asset.name} at attempt ${attempt}: ${err.message || err}`)\n    },\n    maxRetries: 3,\n    promise: function (attempt) {\n      return upload(release, asset)\n    }\n  })\n\n  function upload (release, asset) {\n    const contentType = {\n      '.zip': 'application/zip',\n      '.gz': 'application/tar+gzip'\n    }[path.extname(asset.name)]\n\n    const options = {\n      uri: release.upload_url.replace(/\\{.*$/, `?name=${asset.name}`),\n      headers: {\n        Authorization: `token ${token}`,\n        'Content-Type': contentType,\n        'Content-Length': fs.statSync(asset.path).size,\n        'User-Agent': `node/${process.versions.node}`\n      }\n    }\n\n    return new Promise((resolve, reject) => {\n      const assetRequest = request.post(options, (err, response, body) => {\n        if (err) {\n          return reject(Error(`Uploading asset failed: ${err.message || err}`))\n        }\n\n        if (response.statusCode >= 400) {\n          return reject(Error(`400+ response: ${response.statusCode}\\n${util.inspect(body)}`))\n        }\n\n        resolve(asset)\n      })\n\n      fs.createReadStream(asset.path).pipe(assetRequest)\n    })\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-vmd/node_modules/vmd/shared/create-menu.js":"const isRenderer = process.type === 'renderer'\nconst electron = require('electron')\nconst Menu = isRenderer ? electron.remote.Menu : electron.Menu\nconst MenuItem = isRenderer ? electron.remote.MenuItem : electron.MenuItem\n\nmodule.exports = function (template, model) {\n  var _menu = new Menu()\n  var _model = model\n\n  var m = {\n    getMenu: function () {\n      return _menu\n    },\n\n    getModel: function () {\n      return _model\n    },\n\n    update: function (model) {\n      _model = model\n      updateMenuItems(m.getModel(), template, m.getMenu())\n    }\n  }\n\n  function updateMenuItems (model, tplArr, p) {\n    tplArr.forEach(function (tplItem) {\n      if (!tplItem._item) {\n        tplItem._item = new MenuItem({\n          type: tplItem.type,\n          label: tplItem.label,\n          accelerator: tplItem.accelerator,\n          role: tplItem.role,\n          selector: tplItem.selector,\n          click: function (item, win) {\n            tplItem.click(m.getModel(), item, win)\n          },\n          submenu: Array.isArray(tplItem.submenu) ? new Menu() : null\n        })\n\n        p.append(tplItem._item)\n      }\n\n      if (typeof tplItem.visible === 'function') {\n        tplItem._item.visible = tplItem.visible(model, tplItem._item)\n      }\n\n      if (typeof tplItem.enabled === 'function') {\n        tplItem._item.enabled = tplItem.enabled(model, tplItem._item)\n      }\n\n      if (tplItem._item.submenu) {\n        updateMenuItems(model, tplItem.submenu, tplItem._item.submenu)\n      }\n    })\n\n    return p\n  }\n\n  updateMenuItems(m.getModel(), template, m.getMenu())\n\n  return m\n}\n"}